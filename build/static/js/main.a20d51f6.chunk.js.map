{"version":3,"sources":["InfoBox.jsx","util.js","Map.jsx","Table.jsx","LineGraph.jsx","App.jsx","index.jsx"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","sortData","data","sortedData","sort","a","b","casesTypeColors","hex","multiplier","recovered","deaths","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","prettyPrintStat","stat","ChangeView","zoom","useMap","setView","Map","countries","MapContainer","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","fetchCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a20d51f6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// import css\r\nimport './InfoBox.css'\r\n\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n    // we are spreading all the props which means onClick is inside here\r\n    //why --selected why not __selected in BEM\r\n    // because --selected will change the element\r\n    // add this class if its active\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1\r\n        } else {\r\n            return 1\r\n        }\r\n    });\r\n    return sortedData;\r\n};\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 500,  // 800\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 500,  //1200\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2100,  //2000\r\n    },\r\n};\r\n\r\n\r\n// Draw cirlces on the map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType = \"cases\") => (\r\n    data.map((country) => (\r\n        <Circle\r\n          center={[country.countryInfo.lat, country.countryInfo.long]}\r\n          fillOpacity={0.4}\r\n        //   color={casesTypeColors[casesType].hex}\r\n        //   fillColor={casesTypeColors[casesType].hex}\r\n          pathOptions={{color: casesTypeColors[casesType].hex,\r\n                        fillColor: casesTypeColors[casesType].hex}}\r\n          radius={\r\n              Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n          }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                    className=\"info-flag\"\r\n                      style={{backgroundImage: `url(${country.countryInfo.flag})`}}\r\n                    />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n\r\n        </Circle>\r\n\r\n    ))\r\n);\r\n\r\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\"","import React from 'react';\r\n\r\n\r\n// import css\r\nimport './Map.css';\r\n\r\n// import leaflet components\r\n// in TileLayer, there are some standar things which we can just copy and paste\r\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet';\r\n\r\n\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n}\r\n\r\nfunction Map({ center, zoom, countries, casesType }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <MapContainer center={center} zoom={zoom}>\r\n                <ChangeView center={center} zoom={zoom} />\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {/* Loop through all countries and draw circles */}\r\n            {showDataOnMap(countries, casesType)}\r\n\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\n\r\n// import css\r\nimport './Table.css'\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          // console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core'\r\n\r\n// import components\r\nimport InfoBox from './InfoBox';\r\nimport Map from './Map';\r\nimport Table from './Table';\r\nimport LineGraph from './LineGraph';\r\n\r\n\r\n// import leaflet css\r\nimport \"leaflet/dist/leaflet.css\"\r\n\r\n//import css\r\nimport './App.css';\r\n\r\nimport { sortData, prettyPrintStat } from './util';\r\n\r\nfunction App() {\r\n\r\n    const [ countries, setCountries ] = useState([]);\r\n    // how do we remember which option we have selected ? we use another state\r\n    const [ country, setCountry ] = useState(\"worldwide\");\r\n\r\n    const [ countryInfo, setCountryInfo ] = useState({});\r\n\r\n    const [ tableData, setTableData ] = useState([]);\r\n\r\n    const [ mapCenter, setMapCenter ] = useState({ lat: 34.80746, lng: -40.4796 });\r\n\r\n    const [ mapZoom, setMapZoom ] = useState(3);\r\n\r\n    const [ mapCountries, setMapCountries ] = useState([]);\r\n\r\n    const [ casesType, setCasesType ] = useState(\"cases\")\r\n\r\n\r\n    useEffect(()=>{\r\n        const fetchCountries = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/all')\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n            setCountryInfo(data)\r\n            })\r\n        };\r\n        fetchCountries();\r\n    }, [])\r\n\r\n    // useEffect runs a piece of code\r\n    // based on a given condition i.e >> [condition]\r\n\r\n    useEffect(() => {\r\n        // 1) when condition is []\r\n        // the code inside here will runs once\r\n        // when the component loads and not again after\r\n        // 2) when condition is [variable]\r\n        // the code inside here will runs once\r\n        // when the component loads and as \r\n        // well as when variable changes\r\n\r\n        const getCountriesData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/countries')\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                // restructuring the data\r\n                const countries = data.map((country) =>(\r\n                    // returning an object\r\n                    {\r\n                        name: country.country,\r\n                        value: country.countryInfo.iso2 // UK, USA\r\n                    }));\r\n\r\n                    const sortedData = sortData(data);\r\n                    setCountries(countries);\r\n                    setTableData(sortedData);\r\n                    setMapCountries(data);\r\n            })\r\n        };\r\n        getCountriesData();\r\n    }, [])\r\n\r\n\r\n    const onCountryChange = async (event) => {\r\n        // we wanna get countrycode that he has selected\r\n        const countryCode = event.target.value;\r\n        if (countryCode === \"worldwide\") {\r\n            setMapCenter({ lat: 34.80746, lng: -40.4796 });\r\n            setMapZoom(3);\r\n        }\r\n        setCountry(countryCode)\r\n        // whenever i select something from dropdown i want to make another call\r\n\r\n        // https://disease.sh/v3/covid-19/all\r\n        // https://disease.sh/v3/covid-19/countries/[country_code]\r\n\r\n        const url = countryCode === 'worldwide'\r\n            ? 'https://disease.sh/v3/covid-19/all'\r\n            : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n\r\n        await fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            setCountry(countryCode);\r\n            setCountryInfo(data);\r\n\r\n            // set lng and lat for specific country and zoom that country\r\n            setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n            setMapZoom(5);\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"app__left\">\r\n                <div className=\"app__header\">\r\n                    <h1>COVID-19 TRACKER</h1>\r\n                    <FormControl className=\"app__dropdown\">\r\n                        <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\r\n                            <MenuItem value=\"worldwide\">worldwide</MenuItem>\r\n                            {countries.map((country) => (\r\n                                <MenuItem className=\"app__options\" value={country.value}>{country.name}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n                <div className=\"app__stats\">\r\n                    <InfoBox\r\n                        isRed\r\n                        onClick={(e) => setCasesType(\"cases\")}\r\n                        active={casesType === \"cases\"}\r\n\r\n                        title=\"Infected\"\r\n                        cases={prettyPrintStat(countryInfo.todayCases)}\r\n                        total={prettyPrintStat(countryInfo.cases)} />\r\n                    <InfoBox\r\n                        onClick={(e) => setCasesType(\"recovered\")}\r\n                        active={casesType === \"recovered\"}\r\n\r\n                        title=\"Recovered\"\r\n                        cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n                        total={prettyPrintStat(countryInfo.recovered)} />\r\n                    <InfoBox\r\n                        isRed\r\n                        onClick={(e) => setCasesType(\"deaths\")}\r\n                        active={casesType === \"deaths\"}\r\n\r\n                        title=\"Deaths\"\r\n                        cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n                        total={prettyPrintStat(countryInfo.deaths)} />\r\n                </div>\r\n                <Map\r\n                    center={mapCenter}\r\n                    zoom={mapZoom}\r\n                    countries={mapCountries}\r\n                    casesType={casesType} />\r\n            </div>\r\n            <Card className=\"app__right\">\r\n                <CardContent>\r\n                    <h3>Live cases by country</h3>\r\n                    <Table countries={tableData} />\r\n                    <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\r\n                    <LineGraph className=\"app__graph\" casesType={casesType} />\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  //<React.StrictMode>\r\n    <App />, document.getElementById('root')\r\n  //</React.StrictMode>,\r\n);"],"sourceRoot":""}